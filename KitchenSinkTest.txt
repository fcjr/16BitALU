INIT = 5 # declares 5 as a constant
ONE = 1 # 1 as a constant
FOUR = 4 # four as a constant
main: addi $1 $0 INIT # put 5 into $1
      sw $1 $0 1 # store 5 into DM 1
      subi $1 $1 ONE # $1 = 4
      addi $2 $0 ONE # $2 = 1
      add $1 $1 $2 # $1 = 5
      sub $1 $1 $2 # $1 = 4
      andi $1 $1 FOUR # $1 still = 4
      move $3 $1 #$3 = 4
      j cond # jumps to condition
loop: addi $4 $4 INIT # $4 += 5
      sub $3 $3 $2 # $3--
      nop #testing nop
      nop #testing nop
cond: bne $3 $0 loop # branch if $3 != 0
      sw $4 $0 0 #load $4 which should be 20
      nop
      nop
      nop
      lw $5 $0 1 # load 5 back into $5
      addi $6 $0 INIT
      and $5 $5 $6 #$5 should still be 5
      or $5 $5 $6 #$5 should still be 5
      beq $5 $6 cont2 #tests beq
      nop
      addi $1 $0 6 # puts 6 into $1 if the beq failed
cont2:blt $0 $5 cont3 #tests blt
      nop
      addi $1 $0 6 # puts 6 into $1 if the blt failed
cont3:bgt $5 $0 done #tests bgt sudo instruction
      nop
      addi $1 $0 6 # puts 6 into $1 if the bge failed
done:

# Contents of regs should now be $1 = 4, $2 = 1, $3 = 0, $4 = 20, $5 = 5, $6 = 5
# contents of memory should be 0 = 25, 1 = 5
